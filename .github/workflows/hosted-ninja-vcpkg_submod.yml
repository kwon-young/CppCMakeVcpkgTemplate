# Copyright (c) 2021 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
#
# The peculiarity of this workflow is that assumes vcpkg stored as a submodule of this repository.
# This workflow does the following:
# - Restores vcpkg artifacts from cache.
# - Sets up vcpkg if needed, then run CMake with CMakePreset.json using a configuration
#   that leverages the vcpkg's toolchain file. This will automatically run vcpkg to install dependencies
#   described by the vcpkg.json manifest file. It will be a no-op if those are restored from cache.
# - Finally builds the sources with Ninja.
name: hosted-ninja-vcpkg_submod-autocache
on: [push, workflow_dispatch]

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linux
            os: ubuntu-latest

          - name: Windows
            os: windows-latest
            qtver: 5.15.2
            qtdir: msvc2019_64
            qtstr: windows desktop win64_msvc2019_64

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      #
      # Setup and Configuration
      #
      - name: Linux - Setup
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          sudo apt-get install -y gperf libgles2-mesa-dev qt5-default
          sudo apt-get update -y
      - name: Windows - Setup
        if: ${{ startsWith(matrix.os, 'windows') }}
        env:
          QT_DIR: ${{ github.workspace }}\${{ matrix.qtver }}\${{ matrix.qtdir }}
        run: |
          Add-Content -Path $env:GITHUB_ENV -Value "CMAKE_PREFIX_PATH=$env:QT_DIR;$env:QT_DIR\lib\cmake"
          Add-Content -Path $env:GITHUB_PATH -Value "${{ env.qt_dir }}"
          Add-Content -Path $env:GITHUB_PATH -Value "${{ env.qt_dir }}\bin"

      - name: Qt Cache Restore
        if: ${{ startsWith(matrix.os, 'windows') }}
        id: cache-qt
        uses: actions/cache@v2
        with:
          path: ${{ matrix.qtver }}\${{ matrix.qtdir }}
          key: qt-${{ matrix.os }}-${{ matrix.qtver }}-${{ matrix.qtdir }}

      - name: Qt Cache Install
        if: ${{ startsWith(matrix.os, 'windows') && steps.cache-qt.outputs.cache-hit != 'true' }}
        run: |
          pip install aqtinstall
          python -m aqt install ${{ matrix.qtver }} ${{ matrix.qtstr }}

      - uses: lukka/get-cmake@latest

      - name: Restore artifacts, or setup vcpkg for building artifacts
        uses: lukka/run-vcpkg@v10
        id: runvcpkg
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      - name: Run CMake+vcpkg+Ninja+CTest to generate/build/test.
        uses: lukka/run-cmake@v10
        id: runcmake
        with:
          configurePreset: 'ninja-multi-vcpkg'
          buildPreset: 'ninja-multi-vcpkg-release'
          testPreset: 'ninja-multi-vcpkg-release'

      - name: Windows - Publish Release Build
        if: ${{ startsWith(matrix.os, 'windows') }}
        run: |
          Get-ChildItem
          cmake --install ./builds/ninja-multi-vcpkg --config RelWithDebInfo --prefix ./install -v
          Compress-Archive -Path ./install -DestinationPath ImageStitcher.zip

      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.name }}
          if-no-files-found: ignore
          path: |
            ImageStitcher.zip
